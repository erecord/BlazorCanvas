@using BlazorCanvas.Example10.Core.Assets
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject ILogger<Assets> Logger
@inject IAssetsResolver AssetsResolver

<div class="assets">
    @foreach (var item in _items)
    {
        @_renderers[item.Item1.GetType()](item.Item1, item.Item2)
    }
</div>

@code{
    [Parameter]
    public string Source { get; set; }

    [Parameter]
    public EventCallback OnLoaded { get; set; }

    private readonly List<Tuple<IAsset, AssetData>> _items = new List<Tuple<IAsset, AssetData>>();

    private readonly Dictionary<Type, Func<IAsset, AssetData, RenderFragment>> _renderers = new Dictionary<Type, Func<IAsset, AssetData, RenderFragment>>()
{
        { typeof(Sprite), (a, d) => {
            var sprite = a as Sprite;
            var base64 = Convert.ToBase64String(sprite.Data);
            var src = $"data:image/{sprite.Format};base64,{base64}";
            return @<img @ref="sprite.Source" src="@src" hidden />;
            }
        }
    };

    protected override async Task OnInitializedAsync()
    {
        var items = await Http.GetFromJsonAsync<AssetData[]>(this.Source);

        foreach (var item in items)
        {
            IAsset asset = null;
            if (item.type == "sprite")
                asset = await this.AssetsResolver.Load<Sprite>(item.path);

            if (null != asset)
                _items.Add(new Tuple<IAsset, AssetData>(asset, item));
        }

        await this.OnLoaded.InvokeAsync(this);
    }

    internal class AssetData
    {
        public string path { get; set; }
        public string type { get; set; }
    }
}